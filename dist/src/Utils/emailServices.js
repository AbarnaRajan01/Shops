"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateOTP = exports.sendOTP = exports.verifyOTP = exports.generatePassword = exports.sendPasswordByEmail = void 0;
const nodemailer_1 = __importDefault(require("nodemailer"));
const sendPasswordByEmail = (email, password) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const transporter = nodemailer_1.default.createTransport({
            service: 'gmail',
            auth: {
                user: 'abarnarajanait@gmail.com',
                pass: 'oewwdkmtoojbuocz'
            }
        });
        yield transporter.sendMail({
            from: 'abarnarajanait@gmail.com',
            to: email,
            subject: 'Password to login',
            text: `Your autogenerated password is: ${password}`
        });
        console.log('Password sent to email:', email);
    }
    catch (error) {
        console.error('Email sending error:', error);
        throw new Error('Failed to send password email');
    }
});
exports.sendPasswordByEmail = sendPasswordByEmail;
// export const sendSuccessEmail = async (email: string): Promise<void> => {
//   try {
//     const transporter = nodemailer.createTransport({
//       service: 'gmail',
//       auth: {
//         user: 'abarnarajanait@gmail.com',
//         pass: 'oewwdkmtoojbuocz'
//       }
//     });
//     const mailOptions = {
//       from: 'abarnarajanait@gmail.com',
//       to: email, // Make sure 'email' parameter is correctly passed and is a valid email address
//       subject: 'Login Successful',
//       text: 'Thanks for Registering....',
//       html: '<p>Welcome to our App</p>' // You can use HTML for the email body
//     };
//     await transporter.sendMail(mailOptions);
//     console.log('Thanks note sent to email:', email);
//   } catch (error) {
//     console.error('Email sending error:', error);
//     throw new Error('Failed to send Thanks note email');
//   }
// };
const generatePassword = () => {
    return Math.random().toString(36).slice(-8);
};
exports.generatePassword = generatePassword;
const verifyOTP = (email, otp) => __awaiter(void 0, void 0, void 0, function* () {
    const storedOTP = '123456';
    return otp === storedOTP;
});
exports.verifyOTP = verifyOTP;
const sendOTP = (email, otp) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const transporter = nodemailer_1.default.createTransport({
            service: 'gmail',
            auth: {
                user: 'abarnarajanait@gmail.com',
                pass: 'oewwdkmtoojbuocz'
            }
        });
        yield transporter.sendMail({
            from: 'abarnarajanait@gmail.com',
            to: email,
            subject: 'Your OTP Code',
            text: `Your OTP code is: ${otp}`
        });
        console.log('OTP sent to email:', email);
    }
    catch (error) {
        console.error('Email sending error:', error);
        throw new Error('Failed to send OTP email');
    }
});
exports.sendOTP = sendOTP;
const generateOTP = () => {
    return Math.floor(100000 + Math.random() * 900000).toString(); // Generates a 6-digit OTP
};
exports.generateOTP = generateOTP;
